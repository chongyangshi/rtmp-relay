daemon off;
user  nginx;
worker_processes 1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /dev/stdout  main;
    error_log /dev/stdout debug;

    # fix for very long server names
    server_names_hash_bucket_size 128;
    sendfile        on;
    keepalive_timeout  65;

    # RTMP relay metrics
    server {
        listen      8080;

        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /etc/nginx/stat/;
        }
    }
}

rtmp {
    server {
        listen 1935;

        chunk_size 8192;

        # TV mode: one publisher, many subscribers
        application INGRESS_STREAM_KEY {

            # Enable live streaming
            live on;

            # We don't want to record anything for now as that requires local storage
            record off;

            # It is recommended that we only accept ingress from local subnets,
            # due to the lack of easy TLS support on an obfuscated stream key
            # in this simple subnet. Stream device can be connected into this
            # network through WireGuard.
            allow publish INGRESS_SUBNETS;
            allow publish 127.0.0.1;
            deny publish all;
            
            # Resize input before sending to public ingestion (my input is 
            # between 1080P and 2160P) and remove audio for safety.
            exec ffmpeg -re -i rtmp://127.0.0.1:1935/$app/$name -vcodec libx264 -an -s 1920x1080 -b:v 4500 -maxrate 6000k -bufsize 6000k -preset fast -vf "format=yuv420p" -threads 0 -f flv rtmp://127.0.0.1:1935/remote_push/$name;

            # As we only listen on the container's local network namespace, it's
            # fine to allow all play ingress.
            allow play all;
        }

        # Push to a remote ingestion endpoint, such as Twitch, for further distribution.
        application remote_push {
            live on;

            # Relay the stream to a target.
            push PUSH_RTMP_URL;
            session_relay on;

            allow publish INGRESS_SUBNETS;
            allow publish 127.0.0.1;
            deny publish all;
            allow play all;
        }
    }
}